# Build Flipper Zero Firmware using GitHub Actions
name: Build RogueMaster Test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      anim:
        required: false
        default: 'NoAnim'
        type: choice
        description: Need Anim ?
        options: 
        - 'NoAnim'
        - 'Anim'
  schedule:
    - cron: '35 3,23,5-13/4 * * ?'
env:
  REPO_URL: https://github.com/RogueMaster/flipperzero-firmware-wPlugins
  GIT_NAME: RogueMaster

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检查项目分支
        id: check
        uses: actions/checkout@v3

      - name: 编译环境
        id: environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "FILE_TIME=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date "+%Y%m%d")" >> $GITHUB_ENV
          echo "TIME_HOUR=$(date "+%k")" >> $GITHUB_ENV
          echo "FILE_NAME=$GIT_NAME" >> $GITHUB_ENV
    
      - name: 检查库更新情况
        id: checknew
        run: |
          curl https://api.github.com/repos/$REPO_URL > index.json
          echo "TIMES=$(($(date +%s) - $(date -d $(cat index.json | grep "updated_at" | head -n 1 | sed 's/  \"updated_at\": "//g' | sed 's/\",//g' | sed 's/T/-/g' | sed 's/Z//g') +%s)))" >> $GITHUB_ENV
          if [ ${{ env.TIMES }} >18000 ]
            then
              echo "IFNEW=TRUE" >> $GITHUB_ENV
              echo "status=success" >> $GITHUB_OUTPUT
              echo ${{ env.TIMES }}
          else
              echo "IFNEW=FALSE" >> $GITHUB_ENV
              echo ${{ env.TIMES }}
          fi

      - name: 下载固件源码
        id: download
        working-directory: /workdir
        if: steps.checknew.outputs.status == 'success' && !cancelled()
        run: |
          df -hT $PWD
          git clone $REPO_URL
          ln -sf /workdir/flipperzero-firmware-wPlugins $GITHUB_WORKSPACE/Flipper
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 默认配置
        id: setting
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          sed -i 's/power_limit = 12/power_limit = 12/g' Flipper/targets/f7/furi_hal/furi_hal_region.c
          sed -i 's/false/true/g' Flipper/applications/main/subghz/resources/subghz/assets/extend_range.txt
          cp ./files/setting_user.txt Flipper/applications/main/subghz/resources/subghz/assets/
          sed -i 's/430000000/430000000,430500000/g' Flipper/lib/subghz/subghz_setting.c
          sed -i 's/431500000/431500000,432800000/g' Flipper/lib/subghz/subghz_setting.c
          sed -i 's/430000000/430000000,430500000/g' Flipper/applications/main/subghz/views/subghz_frequency_analyzer.c
          sed -i 's/431500000/431500000,432800000/g' Flipper/applications/main/subghz/views/subghz_frequency_analyzer.c
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 清理Anim
        id: clean
        if: steps.setting.outputs.status == 'success' && github.event.inputs.anim != 'Anim' && !cancelled()
        run: |
          shopt -s extglob
          cp ./files/meta.txt Flipper/assets/dolphin/internal/wrenchathome_F0Pattern_128x64/
          rm -rf Flipper/assets/dolphin/internal/wrenchathome_F0Pattern_128x64/*.png
          cp ./files/frame_0.png Flipper/assets/dolphin/internal/wrenchathome_F0Pattern_128x64/
          rm -rf Flipper/assets/dolphin/external/*
          rm -rf Flipper/assets/resources/dolphin/*
          cp ./files/manifest.txt Flipper/assets/dolphin/external/
          echo "FILE_NAME=$GIT_NAME-NoAnim" >> $GITHUB_ENV

      - name: 编译固件
        id: compile
        if: steps.setting.outputs.status == 'success' && !cancelled()
        run: |
          cd Flipper/
          ./fbt updater_package
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 检查磁盘使用情况
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: df -hT

      - name: 组织文件
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd Flipper/dist/f7-C/
          rm -rf *.tgz
          mv f7-update-* "${{ env.FILE_NAME }}-${{ env.FILE_TIME }}"
          tar -czf "${{ env.FILE_NAME }}-${{ env.FILE_TIME }}.tgz" "${{ env.FILE_NAME }}-${{ env.FILE_TIME }}"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: ${{ env.FILE_NAME }}-${{ env.FILE_TIME }}
          path: ${{ env.FIRMWARE }}

      - name: 生成ReleaseTag
        id: tag
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          echo "release_tag=${{ env.FILE_DATE }}-${{ env.GIT_NAME }}" >> $GITHUB_OUTPUT 
          touch release.txt
          echo "[源码来源]($REPO_URL)" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件到Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FILE_DATE }}_${{ env.GIT_NAME }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*.tgz

      - name: Delete releases and workflows runs
        uses: ophub/delete-releases-workflows@main
        with:
          delete_releases: true
          delete_tags: true
          releases_keep_latest: 3000
          delete_workflows: true
          workflows_keep_day: 3000
          gh_token: ${{ secrets.GH_TOKEN }}
