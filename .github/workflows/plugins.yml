# Build Flipper Zero Firmware using GitHub Actions
name: Build Plugins

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 25 23 * * *

env:
  GITHUB_URL: https://github.com/
  REPO_URL: UberGuidoZ/Flipper
  REPO_URL2: logickworkshop/Flipper-IRDB
  UPLOAD_RELEASE: true
  GIT_NAME: Plugins
  
permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: 检查库更新情况
        id: checknew
        run: |
          curl https://api.github.com/repos/$REPO_URL > index.json
          echo $(TZ=UTC date +%s)
          echo $(TZ=UTC date +%s -d "$(cat index.json | grep "updated_at" | head -n 1 | sed 's/  "updated_at": "//g' | sed 's/\",//g' | sed 's/Z//g' | sed 's/T/ /g')")
          echo $(($(TZ=UTC date +%s) - $(TZ=UTC date +%s -d "$(cat index.json | grep "updated_at" | head -n 1 | sed 's/  "updated_at": "//g' | sed 's/\",//g' | sed 's/Z//g' | sed 's/T/ /g')")))
          if [ $(($(TZ=UTC date +%s) - $(TZ=UTC date +%s -d "$(cat index.json | grep "updated_at" | head -n 1 | sed 's/  "updated_at": "//g' | sed 's/\",//g' | sed 's/Z//g' | sed 's/T/ /g')"))) <86400 ]
            then
              echo "IFNEW=TRUE" >> $GITHUB_ENV
              echo "status=success" >> $GITHUB_OUTPUT
          else
              echo "IFNEW=FALSE" >> $GITHUB_ENV
              echo "No Update"
          fi

      - name: 检查项目分支
        id: check
        if: steps.checknew.outputs.status == 'success' && !cancelled()
        uses: actions/checkout@v4

      - name: 编译环境
        id: environment
        if: steps.checknew.outputs.status == 'success' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 下载源码
        id: download
        if: steps.checknew.outputs.status == 'success' && !cancelled()
        working-directory: /workdir
        run: |
          df -hT $PWD
          echo "FILE_TIME=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date "+%Y%m%d")" >> $GITHUB_ENV
          echo "GIT_NAME=$GIT_NAME" >> $GITHUB_ENV
          git clone --recursive $GITHUB_URL/$REPO_URL
          ln -sf /workdir/Flipper $GITHUB_WORKSPACE/Flipper
          echo "status=success" >>$GITHUB_OUTPUT 
          
      - name: 清理无用文件
        id: clean
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          shopt -s extglob
          rm -rf Flipper/Dolphin_Level
          rm -rf Flipper/Firmware_Options
          rm -rf Flipper/FlipperZero_Dimensions
          rm -rf Flipper/Graphics
          rm -rf Flipper/wetox_scripts
          rm -rf Flipper/Wifi_DevBoard
          rm -rf Flipper/flipper_toolbox
          rm -rf Flipper/Wav_Player
          rm -rf Flipper/Music_Player
          rm -rf Flipper/Sub-GHz/Restaurant_Pagers/Pagger-Generator
          rm -rf Flipper/GPIO
          rm -rf Flipper/Hardware_Troubleshooting
          rm -rf Flipper/Infrared/ir_remote
          rm -rf Flipper/Applications/Official/DEV_FW/source
          rm -rf Flipper/BadUSB/BadUSB-FalsePhilosopher/Misc
          cd Flipper/
          find . -type f -name "" -size 0c | xargs -n 1 rm -f
          find . -type f -name '.github' -exec rm -rf {} \;
          find . -type f -name '.gitignore' -exec rm -rf {} \;
          find . -type f -name '.gitmodules' -exec rm -rf {} \;
          find . -type f -name 'LICENSE' -exec rm -rf {} \;
          find . -type f -name '*.md' -exec rm -rf {} \;
          find . -type f -name '*.pdf' -exec rm -rf {} \;
          find . -type f -name '*.jpg' -exec rm -rf {} \;
          find . -type f -name '*.mov' -exec rm -rf {} \;
          find . -type f -name '*.mp4' -exec rm -rf {} \;
          find . -type f -name '*.zip' -exec rm -rf {} \;
          find . -type f -name '*.png' -exec rm -rf {} \;
          find . -type f -name '*.git' -exec rm -rf {} \;
          find . -type f -name '*.yml' -exec rm -rf {} \;
          echo "status=success" >>$GITHUB_OUTPUT 

      - name: 检查磁盘使用情况
        if: (!cancelled())
        run: df -hT

      - name: 组织文件
        id: organize
        if: steps.clean.outputs.status == 'success' && !cancelled()
        run: |
          cd Flipper/
          zip -r "${{ env.GIT_NAME }}-${{ env.FILE_TIME }}.zip" ./*
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT 

      - name: 生成ReleaseTag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          echo "release_tag=${{ env.FILE_DATE }}-${{ env.GIT_NAME }}" >>$GITHUB_OUTPUT 
          touch release.txt
          echo "[源码来源]($GITHUB_URL/$REPO_URL)" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT 
          
      - name: 上传固件到Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FILE_DATE }}_${{ env.GIT_NAME }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*.zip

      - name: 删除旧的releases和workflows runs
        uses: ophub/delete-releases-workflows@main
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          delete_releases: true
          delete_tags: true
          releases_keep_latest: 3000
          delete_workflows: true
          workflows_keep_day: 365
          gh_token: ${{ secrets.GH_TOKEN }}
